// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{AGE_VERIFY_ELF, AGE_VERIFY_ID};
use risc0_zkvm::{default_prover, ExecutorEnv};
use serde::Serialize;
use std::fs;
use std::time::{SystemTime, UNIX_EPOCH};

#[derive(Serialize)]
struct ProofData {
    input: String, // Hex string containing receipt and image_id
}

fn main() {
    // Initialize tracing
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    // Example birthdate: January 1, 2000 (timestamp in seconds)
    let birthdate_timestamp = 946684800u64; // 2000-01-01T00:00:00Z

    // Get current time
    let current_timestamp = SystemTime::now()
        .duration_since(UNIX_EPOCH)
        .unwrap()
        .as_secs();

    // Create the execution environment
    let env = ExecutorEnv::builder()
        .write(&birthdate_timestamp)
        .unwrap()
        .write(&current_timestamp)
        .unwrap()
        .build()
        .unwrap();

    // Get the prover
    let prover = default_prover();

    // Generate proof
    println!("Generating age verification proof...");
    let receipt = prover
        .prove(env, AGE_VERIFY_ELF)
        .unwrap()
        .receipt;

    // Prepare proof data
    let receipt_bytes = bincode::serialize(&receipt).unwrap();
    let image_id_bytes: Vec<u8> = AGE_VERIFY_ID
        .iter()
        .flat_map(|&id| id.to_le_bytes().to_vec())
        .collect();

    // Combine receipt and image_id
    let mut combined_bytes = Vec::new();
    combined_bytes.extend_from_slice(&receipt_bytes);
    combined_bytes.extend_from_slice(&image_id_bytes);

    // Create proof data with hex encoding
    let proof_data = ProofData {
        input: hex::encode(&combined_bytes),
    };

    // Log the image ID
    println!("\n=== AGE VERIFICATION IMAGE ID ===");
    println!("const AGE_VERIFY_ID: [u32; 8] = [");
    for (i, &id) in AGE_VERIFY_ID.iter().enumerate() {
        if i < AGE_VERIFY_ID.len() - 1 {
            println!("    0x{:08x},", id);
        } else {
            println!("    0x{:08x}", id);
        }
    }
    println!("];");

    // Save proof to file
    fs::write(
        "proof_input.json",
        serde_json::to_string_pretty(&proof_data).unwrap(),
    )
    .unwrap();

    println!("\n=== PROOF STATS ===");
    println!("Proof size: {} bytes", combined_bytes.len());
    println!("Hex string length: {} chars", proof_data.input.len());

}
